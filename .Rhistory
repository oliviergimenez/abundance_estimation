render("input.Rmd")
library("RMark", lib.loc="/Library/Frameworks/R.framework/Versions/3.0/Resources/library")
library("unmarked", lib.loc="/Library/Frameworks/R.framework/Versions/3.0/Resources/library")
library("msm", lib.loc="/Library/Frameworks/R.framework/Versions/3.0/Resources/library")
library("microbenchmark", lib.loc="/Library/Frameworks/R.framework/Versions/3.0/Resources/library")
library("MCMCpack", lib.loc="/Library/Frameworks/R.framework/Versions/3.0/Resources/library")
library("HiddenMarkov", lib.loc="/Library/Frameworks/R.framework/Versions/3.0/Resources/library")
library("bayesm", lib.loc="/Library/Frameworks/R.framework/Versions/3.0/Resources/library")
library("HMM", lib.loc="/Library/Frameworks/R.framework/Versions/3.0/Resources/library")
library(asnipe)
setwd('/Users/gimenez/Dropbox/OG/GitHub')
library(RMark)
mwsb<-import.chdata("minkewhalesAprAug20082013.txt", header = F, field.names = c("ch"), field.types = NULL)
summary(mwsb)
attach(mwsb)
setwd('/Users/gimenez/Dropbox/OG/GitHub/abundance_capturerecapture')
mwsb<-import.chdata("minkewhalesAprAug20082013.txt", header = F, field.names = c("ch"), field.types = NULL)
summary(mwsb)
attach(mwsb)
mwsb.proc <- process.data(mwsb, model = "CJS")
mwsb.ddl <- make.design.data(mwsb.proc)
mwsb.ddl <- add.design.data(mwsb.proc, mwsb.ddl,"Phi", type = "age", bins = c(0,1,6), name = "ageclass", right = FALSE)
# survival process
Phi.age <- list(formula=~ageclass)
Phi.ageptime <- list(formula=~ageclass+time)
# detection process
p.ct <- list(formula=~1)
p.time <- list(formula=~time)
Model.1 <- mark(mwsb.proc, mwsb.ddl, model.parameters = list(Phi = Phi.age, p = p.ct), output = FALSE,delete=T)
Model.2 <- mark(mwsb.proc, mwsb.ddl,model.parameters = list(Phi = Phi.age, p=p.time),output = FALSE,delete=T)
Model.3 <- mark(mwsb.proc, mwsb.ddl,model.parameters = list(Phi = Phi.ageptime, p = p.ct),output = FALSE,delete=T)
Model.4 <- mark(mwsb.proc, mwsb.ddl,model.parameters = list(Phi=Phi.ageptime, p = p.time),output = FALSE,delete=T)
mwsb.proc <- process.data(mwsb, model="CJSMixture")
mwsb.ddl <- make.design.data(mwsb.proc)
mwsb.ddl <- add.design.data(mwsb.proc, mwsb.ddl,"Phi", type = "age", bins = c(0,1,6), name = "ageclass", right = FALSE)
# Mixture process
pi.dot=list(formula=~1)
Model.5=mark(mwsb.proc,mwsb.ddl,model.parameters=list(Phi = Phi.age, p = p.ct,pi=pi.dot), invisible=FALSE)
Model.6=mark(mwsb.proc,mwsb.ddl,model.parameters=list(Phi = Phi.age, p=p.time,pi=pi.dot), invisible=FALSE)
Model.7=mark(mwsb.proc,mwsb.ddl,model.parameters=list(Phi = Phi.ageptime, p = p.ct,pi=pi.dot), invisible=FALSE)
Model.8=mark(mwsb.proc,mwsb.ddl,model.parameters=list(Phi=Phi.ageptime, p = p.time,pi=pi.dot), invisible=FALSE)
# homogeneous models
summary(Model.1)$AICc
summary(Model.2)$AICc
summary(Model.3)$AICc
summary(Model.4)$AICc
# heterogeous models
summary(Model.5)$AICc
summary(Model.6)$AICc
summary(Model.7)$AICc
summary(Model.8)$AICc
whales = import.chdata("humpbackwhaleMaySep20062013.txt", header = F, field.names = c("ch"), field.types = NULL)
library(RMark)
whales = import.chdata("humpbackwhaleMaySep20062013.txt", header = F, field.names = c("ch"), field.types = NULL)
summary(whales)
attach(whales)
hw.dat = import.chdata("humpbackwhaleMaySep20062013.txt", header = F, field.names = c("ch"), field.types = NULL)
summary(hw.dat)
attach(hw.dat)
hw.proc <- process.data(hw.dat, model="CJS")
hw.ddl <- make.design.data(hw.proc)
# survival process
Phi.ct=list(formula=~1)
Phi.time=list(formula=~time)
# detection process
p.ct=list(formula=~1)
p.time=list(formula=~time)
Model.1=mark(hw.proc,hw.ddl,model.parameters=list(Phi=Phi.ct,p=p.ct),output = FALSE,delete=T)
Model.2=mark(hw.proc,hw.ddl,model.parameters=list(Phi=Phi.ct,p=p.time),output = FALSE,delete=T)
Model.3=mark(hw.proc,hw.ddl,model.parameters=list(Phi=Phi.time,p=p.ct),output = FALSE,delete=T)
Model.4=mark(hw.proc,hw.ddl,model.parameters=list(Phi=Phi.time,p=p.time),output = FALSE,delete=T)
# Model building
hw.proc <- process.data(hw.dat, model="CJSMixture")
hw.ddl <- make.design.data(hw.proc)
# Mixture process
pi.dot=list(formula=~1)
Model.5=mark(hw.proc,hw.ddl,model.parameters=list(Phi=Phi.ct,p=p.ct,pi=pi.dot),output = FALSE,delete=T)
Model.6=mark(hw.proc,hw.ddl,model.parameters=list(Phi=Phi.ct,p=p.time,pi=pi.dot),output = FALSE,delete=T)
Model.7=mark(hw.proc,hw.ddl,model.parameters=list(Phi=Phi.time,p=p.ct,pi=pi.dot),output = FALSE,delete=T)
Model.8=mark(hw.proc,hw.ddl,model.parameters=list(Phi=Phi.time,p=p.time,pi=pi.dot),output = FALSE,delete=T)
# homogeneous models
summary(Model.1)$AICc
summary(Model.2)$AICc
summary(Model.3)$AICc
summary(Model.4)$AICc
# heterogeous models
summary(Model.5)$AICc
summary(Model.6)$AICc
summary(Model.7)$AICc
summary(Model.8)$AICc
phitable = get.real(Model.2,"Phi", se= TRUE)
phitable
names(phitable)
phitable[c("estimate","se","lcl","ucl")]
phitable[c("estimate","se","lcl","ucl")][1,]
ptable = get.real(Model.2,"p", se= TRUE) # time
ptable[c("estimate","se","lcl","ucl")][1:7,]
ptable[c("estimate","se","lcl","ucl")][1:8,]
data.frame(hw.dat,stringsAsFactors=F)
data.frame(hw.dat,stringsAsFactors=T)
data.frame(hw.dat,stringsAsFactors=F)
source('~/.active-rstudio-document', echo=TRUE)
nb_bootstrap = 100
nb_years = 8
target = data.frame(hw.dat,stringsAsFactors=F)
popsize = matrix(NA,bootstrap, nb_years-1)
set.seed(5)
library(RMark)
data.frame(hw.dat,stringsAsFactors=F)
library(RMark)
hw.dat = import.chdata("humpbackwhaleMaySep20062013.txt", header = F, field.names = c("ch"), field.types = NULL)
summary(hw.dat)
attach(hw.dat)
hw.proc = process.data(hw.dat, model="CJS")
hw.ddl = make.design.data(hw.proc)
# survival process
Phi.ct = list(formula=~1)
Phi.time = list(formula=~time)
# detection process
p.ct = list(formula=~1)
p.time = list(formula=~time)
Model.1 = mark(hw.proc,hw.ddl,model.parameters=list(Phi=Phi.ct,p=p.ct),output = FALSE,delete=T)
Model.2 = mark(hw.proc,hw.ddl,model.parameters=list(Phi=Phi.ct,p=p.time),output = FALSE,delete=T)
Model.3 = mark(hw.proc,hw.ddl,model.parameters=list(Phi=Phi.time,p=p.ct),output = FALSE,delete=T)
Model.4 = mark(hw.proc,hw.ddl,model.parameters=list(Phi=Phi.time,p=p.time),output = FALSE,delete=T)
# Model building
hw.proc = process.data(hw.dat, model="CJSMixture")
hw.ddl = make.design.data(hw.proc)
# Mixture process
pi.dot=list(formula=~1)
Model.5 = mark(hw.proc,hw.ddl,model.parameters=list(Phi=Phi.ct,p=p.ct,pi=pi.dot),output = FALSE,delete=T)
Model.6 = mark(hw.proc,hw.ddl,model.parameters=list(Phi=Phi.ct,p=p.time,pi=pi.dot),output = FALSE,delete=T)
Model.7 = mark(hw.proc,hw.ddl,model.parameters=list(Phi=Phi.time,p=p.ct,pi=pi.dot),output = FALSE,delete=T)
Model.8 = mark(hw.proc,hw.ddl,model.parameters=list(Phi=Phi.time,p=p.time,pi=pi.dot),output = FALSE,delete=T)
# homogeneous models
summary(Model.1)$AICc
summary(Model.2)$AICc
summary(Model.3)$AICc
summary(Model.4)$AICc
# heterogeous models
summary(Model.5)$AICc
summary(Model.6)$AICc
summary(Model.7)$AICc
summary(Model.8)$AICc
phitable = get.real(Model.2,"Phi", se= TRUE)
# names(phitable)
phitable[c("estimate","se","lcl","ucl")][1,]
ptable = get.real(Model.2,"p", se= TRUE)
ptable[c("estimate","se","lcl","ucl")][1:7,]
nb_bootstrap = 100
nb_years = 8
target = data.frame(hw.dat,stringsAsFactors=F)
popsize = matrix(NA,bootstrap, nb_years-1)
set.seed(5)
k=1
nb_bootstrap = 100
nb_years = 8
target = data.frame(hw.dat,stringsAsFactors=F)
popsize = matrix(NA,nb_bootstrap, nb_years-1)
set.seed(5)
pseudo = target # initialization
pseudo$ch = sample(target$ch, replace=T)
pseudo
hw.proc <- process.data(pseudo, model="CJS")
hw.ddl <- make.design.data(hw.proc)
Phi.ct=list(formula=~1)
p.time=list(formula=~time)
Model.1=mark(hw.proc,hw.ddl,model.parameters=list(Phi=Phi.ct,p=p.time),delete=TRUE,output=FALSE)
ptable = get.real(Model.1,"p", se= TRUE)
ptable
ptable$estimate
ptable$estimate[1:(nb_years-1)]
ptable
pseudo$ch = sample(target$ch, replace=T)
hw.proc <- process.data(pseudo, model="CJS")
hw.ddl <- make.design.data(hw.proc)
Phi.ct=list(formula=~1)
p.time=list(formula=~time)
Model.1=mark(hw.proc,hw.ddl,model.parameters=list(Phi=Phi.ct,p=p.time),delete=TRUE,output=FALSE)
ptable = get.real(Model.1,"p", se= TRUE)
ptable
pseudo$ch = sample(target$ch, replace=T)
hw.proc <- process.data(pseudo, model="CJS")
hw.ddl <- make.design.data(hw.proc)
Phi.ct=list(formula=~1)
p.time=list(formula=~time)
Model.1=mark(hw.proc,hw.ddl,model.parameters=list(Phi=Phi.ct,p=p.time),delete=TRUE,output=FALSE)
ptable = get.real(Model.1,"p", se= TRUE)
ptable
nb_bootstrap = 10
nb_years = 8
target = data.frame(hw.dat,stringsAsFactors=F)
popsize = matrix(NA,nb_bootstrap, nb_years-1)
set.seed(5)
pseudo = target # initialization
hw.proc = process.data(pseudo, model="CJS")
hw.ddl = make.design.data(hw.proc)
phi.ct = list(formula=~1)
p.time = list(formula=~time)
res = mark(hw.proc,hw.ddl,model.parameters=list(Phi=phi.ct,p=p.time),delete=TRUE,output=FALSE)
ptable = get.real(res,"p", se= TRUE)
ptable$estimate[1:(nb_years-1)]
allobs = gregexpr("1", pseudo$ch)
allobs
?gregexpr
n = summary(as.factor(unlist(allobs)))
n
popsize[k,] <- n[-1]/ptable$estimate[1:(nb_years-1)]
popsize
for (k in 1:nb_bootstrap){
# resample in the original dataset with replacement
pseudo$ch = sample(target$ch, replace=T)
# define model structure
hw.proc = process.data(pseudo, model="CJS")
hw.ddl = make.design.data(hw.proc)
# define parameter structure
phi.ct = list(formula=~1)
p.time = list(formula=~time)
# fit model with Mark
res = mark(hw.proc,hw.ddl,model.parameters=list(Phi=phi.ct,p=p.time),delete=TRUE,output=FALSE)
# get recapture prob estimates
ptable = get.real(res,"p", se= TRUE)
# calculate the nb of recaptured individiduals / occasion
allobs = gregexpr("1", pseudo$ch)
n = summary(as.factor(unlist(allobs)))
popsize[k,] <- n[-1]/ptable$estimate[1:(nb_years-1)]
}
popsize
apply(popsize,2,quantile,probs=c(2.5/100,97.5/100),na.rm=T)
allobs = gregexpr("1", hw.dat$ch)
allobs
n = summary(as.factor(unlist(allobs)))
obs = gregexpr("1", hw.dat$ch)
obs = gregexpr("1", hw.dat$ch)
n_obs = summary(as.factor(unlist(obs)))
n_obs
ptable = get.real(Model.2,"p", se= TRUE)
ptable[c("estimate","se","lcl","ucl")][1:7,]
obs = gregexpr("1", hw.dat$ch)
n_obs = summary(as.factor(unlist(obs)))
estim_abundance = n_obs[-1]/ptable$estimate[1:7] # nb of capture occ - 1
estim_abundance
library(RMark)
mw.dat = import.chdata("minkewhalesAprAug20082013.txt", header = F, field.names = c("ch"), field.types = NULL)
summary(mw.dat)
attach(mw.dat)
mw.proc <- process.data(mw.dat, model = "CJS")
mw.proc <- process.data(mw.dat, model = "CJS")
mw.proc <- process.data(mw.dat, model = "CJS")
mw.ddl <- make.design.data(mw.proc)
mw.ddl <- add.design.data(mw.proc, mwsb.ddl,"Phi", type = "age", bins = c(0,1,6), name = "ageclass", right = FALSE)
mw.ddl <- add.design.data(mw.proc, mw.ddl,"Phi", type = "age", bins = c(0,1,6), name = "ageclass", right = FALSE)
# survival process
Phi.age <- list(formula=~ageclass)
Phi.ageptime <- list(formula=~ageclass+time)
# detection process
p.ct <- list(formula=~1)
p.time <- list(formula=~time)
# survival process
phi.age <- list(formula=~ageclass)
phi.ageptime <- list(formula=~ageclass+time)
# detection process
p.ct <- list(formula=~1)
p.time <- list(formula=~time)
#Mixture process
pi.dot=list(formula=~1)
Model.1 = mark(mw.proc, mw.ddl, model.parameters = list(Phi = phi.age, p = p.ct),output = FALSE,delete=T)
Model.2 = mark(mw.proc, mw.ddl,model.parameters = list(Phi = phi.age, p = p.time),output = FALSE,delete=T)
Model.3 = mark(mw.proc, mw.ddl,model.parameters = list(Phi = phi.ageptime, p = p.ct),output = FALSE,delete=T)
Model.4 = mark(mw.proc, mw.ddl,model.parameters = list(Phi = phi.ageptime, p = p.time),output = FALSE,delete=T)
Model.5 = mark(mw.proc2,mw.ddl2,model.parameters=list(Phi = phi.age, p = p.ct, pi = pi.dot),output = FALSE,delete=T)
Model.6 = mark(mw.proc2,mw.ddl2,model.parameters=list(Phi = phi.age, p=p.time, pi = pi.dot),output = FALSE,delete=T)
Model.7 = mark(mw.proc2,mw.ddl2,model.parameters=list(Phi = phi.ageptime, p = p.ct, pi = pi.dot),output = FALSE,delete=T)
Model.8 = mark(mw.proc2,mw.ddl2,model.parameters=list(Phi = phi.ageptime, p = p.time, pi = pi.dot),output = FALSE,delete=T)
# homogeneous structure
mw.proc <- process.data(mw.dat, model = "CJS")
mw.ddl <- make.design.data(mw.proc)
mw.ddl <- add.design.data(mw.proc, mw.ddl,"Phi", type = "age", bins = c(0,1,6), name = "ageclass", right = FALSE)
# heterogeneous structure
mw.proc2 <- process.data(mw.dat, model="CJSMixture")
mw.ddl2 <- make.design.data(mw.proc2)
mw.ddl2 <- add.design.data(mw.proc2, mw.ddl2,"Phi", type = "age", bins = c(0,1,6), name = "ageclass", right = FALSE)
# survival process
phi.age <- list(formula=~ageclass)
phi.ageptime <- list(formula=~ageclass+time)
# detection process
p.ct <- list(formula=~1)
p.time <- list(formula=~time)
#Mixture process
pi.dot=list(formula=~1)
Model.1 = mark(mw.proc, mw.ddl, model.parameters = list(Phi = phi.age, p = p.ct),output = FALSE,delete=T)
Model.2 = mark(mw.proc, mw.ddl,model.parameters = list(Phi = phi.age, p = p.time),output = FALSE,delete=T)
Model.3 = mark(mw.proc, mw.ddl,model.parameters = list(Phi = phi.ageptime, p = p.ct),output = FALSE,delete=T)
Model.4 = mark(mw.proc, mw.ddl,model.parameters = list(Phi = phi.ageptime, p = p.time),output = FALSE,delete=T)
Model.5 = mark(mw.proc2,mw.ddl2,model.parameters=list(Phi = phi.age, p = p.ct, pi = pi.dot),output = FALSE,delete=T)
Model.6 = mark(mw.proc2,mw.ddl2,model.parameters=list(Phi = phi.age, p=p.time, pi = pi.dot),output = FALSE,delete=T)
Model.7 = mark(mw.proc2,mw.ddl2,model.parameters=list(Phi = phi.ageptime, p = p.ct, pi = pi.dot),output = FALSE,delete=T)
Model.8 = mark(mw.proc2,mw.ddl2,model.parameters=list(Phi = phi.ageptime, p = p.time, pi = pi.dot),output = FALSE,delete=T)
# homogeneous models
summary(Model.1)$AICc
summary(Model.2)$AICc
summary(Model.3)$AICc
summary(Model.4)$AICc
# heterogeous models
summary(Model.5)$AICc
summary(Model.6)$AICc
summary(Model.7)$AICc
summary(Model.8)$AICc
phitable = get.real(Model.1,"Phi", se= TRUE)
# names(phitable)
phitable[c("estimate","se","lcl","ucl")][1,]
phitable[c("estimate","se","lcl","ucl")][1:2,]
ptable = get.real(Model.1,"p", se= TRUE)
ptable[c("estimate","se","lcl","ucl")][1,]
obs = gregexpr("1", mw.dat$ch)
obs
n_obs = summary(as.factor(unlist(obs)))
ptable$estimate[1]
ptable$estimate
estim_abundance = n_obs[-1]/ptable$estimate[1]
estim_abundance = n_obs[-1]/ptable$estimate[1]
esti`m_abundance
estim_abundance
k=1
pseudo$ch <- sample(target$ch, replace=T)
nb_bootstrap = 10
nb_years = 6
target = data.frame(mw.dat,stringsAsFactors=F)
pseudo = target # initialization
popTot = popT = popR = matrix(NA, nb_bootstrap, nb_years-1) # abundance
tau = rep(NA, nb_bootstrap) # transient rate
det.p = rep(NA, nb_bootstrap) # recapture
set.seed(5)
# model structure
mw.proc <- process.data(mw.dat, model = "CJS")
mw.ddl <- make.design.data(mw.proc)
mw.ddl <- add.design.data(mw.proc, mw.ddl,"Phi", type = "age", bins = c(0,1,6), name = "ageclass", right = FALSE)
# parameters
phiage <- list(formula=~ageclass)
p.ct <- list(formula=~1)
k
pseudo$ch <- sample(target$ch, replace=T)
# calculate R and m
firstobs<-regexpr("1", boot$ch)
firstobs<-regexpr("1", pseudo$ch)
R<-summary(factor(firstobs,levels=1:T))
allobs<-gregexpr("1", pseudo$ch)
n<-summary(as.factor(unlist(allobs)))
m<-n-R
m
target
pseudo$ch <- sample(target$ch, replace=T)
# calculate R and m
firstobs<-regexpr("1", pseudo$ch)
R<-summary(factor(firstobs,levels=1:nb_years))
allobs<-gregexpr("1", pseudo$ch)
n<-summary(as.factor(unlist(allobs)))
m<-n-R
m
# fit model with 2 age classes on survival and constant recapture with MARK
phiage.pct = mark(process.data(pseudo),mw.ddl,model.parameters=list(Phi=phiage,p=p.ct),output = FALSE,delete=T)
tau[k] = 1 - phiage.pct$results$real[1,1] / phiage.pct$results$real[2,1] # transient rate
det.p[k] = phiage.pct$results$real[3,1]
# calculate abundance of residents and transients
popR[k,] = (m[-1] + R[-1] * (1 - tau[k])) / det.p[k]
popT[k,] = R[-1] * tau[k] / det.p[k]
popT
nb_bootstrap = 10
nb_years = 6
target = data.frame(mw.dat,stringsAsFactors=F)
pseudo = target # initialization
popTot = popT = popR = matrix(NA, nb_bootstrap, nb_years-1) # abundance
tau = rep(NA, nb_bootstrap) # transient rate
det.p = rep(NA, nb_bootstrap) # recapture
set.seed(5)
# model structure
mw.proc <- process.data(mw.dat, model = "CJS")
mw.ddl <- make.design.data(mw.proc)
mw.ddl <- add.design.data(mw.proc, mw.ddl,"Phi", type = "age", bins = c(0,1,6), name = "ageclass", right = FALSE)
# parameters
phiage <- list(formula=~ageclass)
p.ct <- list(formula=~1)
for (k in 1:nb_bootstrap){
# draw new sample
pseudo$ch = sample(target$ch, replace=T)
# calculate R and m
firstobs = regexpr("1", pseudo$ch)
R = summary(factor(firstobs,levels=1:nb_years))
allobs = gregexpr("1", pseudo$ch)
n = summary(as.factor(unlist(allobs)))
m = n-R
# fit model with 2 age classes on survival and constant recapture with MARK
phiage.pct = mark(process.data(pseudo),mw.ddl,model.parameters=list(Phi=phiage,p=p.ct),output = FALSE,delete=T)
tau[k] = 1 - phiage.pct$results$real[1,1] / phiage.pct$results$real[2,1] # transient rate
det.p[k] = phiage.pct$results$real[3,1]
# calculate abundance of residents and transients
popR[k,] = (m[-1] + R[-1] * (1 - tau[k])) / det.p[k]
popT[k,] = R[-1] * tau[k] / det.p[k]
}
popT
popR
popRmean = apply(popR,2,mean) # mean resident population size
popRci = apply(popR,2,quantile,c(0.025,0.975))
popRmean
popRci
popRmean = apply(popR,2,mean) # mean resident population size
popRci = apply(popR,2,quantile,c(0.025,0.975))
popRmean = apply(popR,2,mean) # mean resident population size
popRmean
popRci = apply(popR,2,quantile,c(0.025,0.975))
popRci
plot(1:(nb_years-1),popRmean, col="black", type="n", pch=21, xlab="Years", lty=3, ylab="Estimated abundance", main="Total",lwd=3)
popRci
polygon(c(rev(1:(nb_years-1)), 1:(nb_years-1)), c(rev(popRci[2,]), popRci[1,]), col = 'grey80', border = NA)
lines(1:(nb_years-1), popRmean, col="black",lty=3,type='o',lwd=3,pch=21)
plot(1:(nb_years-1),popRmean, col="black", type="n", pch=21, xlab="Years", lty=3, ylab="Estimated abundance", main="Total",lwd=3,ylim=c(0;300))
polygon(c(rev(1:(nb_years-1)), 1:(nb_years-1)), c(rev(popRci[2,]), popRci[1,]), col = 'grey80', border = NA)
lines(1:(nb_years-1), popRmean, col="black",lty=3,type='o',lwd=3,pch=21)
plot(1:(nb_years-1),popRmean, col="black", type="n", pch=21, xlab="Years", lty=3, ylab="Estimated abundance", main="Total",lwd=3,ylim=c(0;300))
plot(1:(nb_years-1),popRmean, col="black", type="n", pch=21, xlab="Years", lty=3, ylab="Estimated abundance", main="Total",lwd=3,ylim=c(0,300))
polygon(c(rev(1:(nb_years-1)), 1:(nb_years-1)), c(rev(popRci[2,]), popRci[1,]), col = 'grey80', border = NA)
lines(1:(nb_years-1), popRmean, col="black",lty=3,type='o',lwd=3,pch=21)
plot(1:(nb_years-1),popRmean, col="black", type="n", pch=21, xlab="Years", lty=3, ylab="Estimated abundance", main="Total",lwd=3,ylim=c(0,150))
polygon(c(rev(1:(nb_years-1)), 1:(nb_years-1)), c(rev(popRci[2,]), popRci[1,]), col = 'grey80', border = NA)
lines(1:(nb_years-1), popRmean, col="black",lty=3,type='o',lwd=3,pch=21)
plot(1:(nb_years-1),popRmean, col="black", type="n", pch=21, xlab="Years", lty=3, ylab="Estimated abundance", main="Minke whales",lwd=3,ylim=c(0,120))
polygon(c(rev(1:(nb_years-1)), 1:(nb_years-1)), c(rev(popRci[2,]), popRci[1,]), col = 'grey80', border = NA)
lines(1:(nb_years-1), popRmean, col="black",lty=3,type='o',lwd=3,pch=21)
library(RMark)
hw.dat = import.chdata("humpbackwhaleMaySep20062013.txt", header = F, field.names = c("ch"), field.types = NULL)
summary(hw.dat)
attach(hw.dat)
hw.proc = process.data(hw.dat, model="CJS")
hw.ddl = make.design.data(hw.proc)
# survival process
Phi.ct = list(formula=~1)
Phi.time = list(formula=~time)
# detection process
p.ct = list(formula=~1)
p.time = list(formula=~time)
Model.1 = mark(hw.proc,hw.ddl,model.parameters=list(Phi=Phi.ct,p=p.ct),output = FALSE,delete=T)
Model.2 = mark(hw.proc,hw.ddl,model.parameters=list(Phi=Phi.ct,p=p.time),output = FALSE,delete=T)
Model.3 = mark(hw.proc,hw.ddl,model.parameters=list(Phi=Phi.time,p=p.ct),output = FALSE,delete=T)
Model.4 = mark(hw.proc,hw.ddl,model.parameters=list(Phi=Phi.time,p=p.time),output = FALSE,delete=T)
# Model building
hw.proc = process.data(hw.dat, model="CJSMixture")
hw.ddl = make.design.data(hw.proc)
# Mixture process
pi.dot=list(formula=~1)
Model.5 = mark(hw.proc,hw.ddl,model.parameters=list(Phi=Phi.ct,p=p.ct,pi=pi.dot),output = FALSE,delete=T)
Model.6 = mark(hw.proc,hw.ddl,model.parameters=list(Phi=Phi.ct,p=p.time,pi=pi.dot),output = FALSE,delete=T)
Model.7 = mark(hw.proc,hw.ddl,model.parameters=list(Phi=Phi.time,p=p.ct,pi=pi.dot),output = FALSE,delete=T)
Model.8 = mark(hw.proc,hw.ddl,model.parameters=list(Phi=Phi.time,p=p.time,pi=pi.dot),output = FALSE,delete=T)
# homogeneous models
summary(Model.1)$AICc
summary(Model.2)$AICc
summary(Model.3)$AICc
summary(Model.4)$AICc
# heterogeous models
summary(Model.5)$AICc
summary(Model.6)$AICc
summary(Model.7)$AICc
summary(Model.8)$AICc
phitable = get.real(Model.2,"Phi", se= TRUE)
# names(phitable)
phitable[c("estimate","se","lcl","ucl")][1,]
ptable = get.real(Model.2,"p", se= TRUE)
ptable[c("estimate","se","lcl","ucl")][1:7,]
# calculate the nb of recaptured individiduals / occasion
obs = gregexpr("1", hw.dat$ch)
n_obs = summary(as.factor(unlist(obs)))
estim_abundance = n_obs[-1]/ptable$estimate[1:7]
estim_abundance
nb_bootstrap = 10
nb_years = 8
target = data.frame(hw.dat,stringsAsFactors=F)
popsize = matrix(NA,nb_bootstrap, nb_years-1)
set.seed(5)
pseudo = target # initialization
# define model structure
hw.proc = process.data(pseudo, model="CJS")
hw.ddl = make.design.data(hw.proc)
# define parameter structure
phi.ct = list(formula=~1)
p.time = list(formula=~time)
for (k in 1:nb_bootstrap){
# resample in the original dataset with replacement
pseudo$ch = sample(target$ch, replace=T)
# fit model with Mark
res = mark(hw.proc,hw.ddl,model.parameters=list(Phi=phi.ct,p=p.time),delete=TRUE,output=FALSE)
# get recapture prob estimates
ptable = get.real(res,"p", se= TRUE)
# calculate the nb of recaptured individiduals / occasion
allobs = gregexpr("1", pseudo$ch)
n = summary(as.factor(unlist(allobs)))
popsize[k,] <- n[-1]/ptable$estimate[1:(nb_years-1)]
}
ci_hw = apply(popsize,2,quantile,probs=c(2.5/100,97.5/100),na.rm=T)
ci_hw
popsize
estim_abundance
plot(1:(nb_years-1),estim_abundance, col="black", type="n", pch=21, xlab="Years", lty=3, ylab="Estimated abundance", main="Minke whales",lwd=3,ylim=c(0,120))
plot(1:(nb_years-1),estim_abundance, col="black", type="n", pch=21, xlab="Years", lty=3, ylab="Estimated abundance", main="Minke whales",lwd=3,ylim=c(0,120))
polygon(c(rev(1:(nb_years-1)), 1:(nb_years-1)), c(rev(ci_hw[2,]), ci_hw[1,]), col = 'grey80', border = NA)
polygon(c(rev(1:(nb_years-1)), 1:(nb_years-1)), c(rev(ci_hw[2,]), ci_hw[1,]), col = 'grey80', border = NA)
lines(1:(nb_years-1), estim_abundance, col="black",lty=3,type='o',lwd=3,pch=21)
plot(1:(nb_years-1),estim_abundance, col="black", type="n", pch=21, xlab="Years", lty=3, ylab="Estimated abundance", main="Minke whales",lwd=3,ylim=c(0,150))
polygon(c(rev(1:(nb_years-1)), 1:(nb_years-1)), c(rev(ci_hw[2,]), ci_hw[1,]), col = 'grey80', border = NA)
lines(1:(nb_years-1), estim_abundance, col="black",lty=3,type='o',lwd=3,pch=21)
mean(tau)
mean(tau)
quantile(tau,probs=c(2.5,97.5)/100)
